name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      # 3. Find .csproj file automatically
      - name: Find project file
        id: find-project
        run: |
          $projectFile = Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $projectFile) { Write-Error "No .csproj found!" ; exit 1 }
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($projectFile)
          echo "project_file=$projectFile" >> $env:GITHUB_OUTPUT
          echo "project_name=$projectName" >> $env:GITHUB_OUTPUT

      # 4. Build the project in Release mode
      - name: Build project
        run: msbuild "${{ steps.find-project.outputs.project_file }}" /p:Configuration=Release /restore

      # 5. Create ZIP of the DLL
      - name: Create ZIP
        run: |
          $projectDir = Split-Path "${{ steps.find-project.outputs.project_file }}" -Parent
          $dllPath = Join-Path $projectDir "bin\Release\net472\${{ steps.find-project.outputs.project_name }}.dll"
          if (-not (Test-Path $dllPath)) { Write-Error "DLL not found at $dllPath"; exit 1 }
          $zipPath = "${{ steps.find-project.outputs.project_name }}-${{ github.ref_name }}.zip"
          Write-Host "Zipping $dllPath to $zipPath"
          Compress-Archive -Path $dllPath -DestinationPath $zipPath

      # 6. Verify ZIP was created
      - name: Verify ZIP file
        run: |
          $zipPath = "${{ steps.find-project.outputs.project_name }}-${{ github.ref_name }}.zip"
          Write-Host "Looking for ZIP at: $zipPath"
          if (Test-Path $zipPath) {
              Write-Host "✓ ZIP file found: $zipPath"
              Write-Host "File size: $((Get-Item $zipPath).Length) bytes"
          } else {
              Write-Error "✗ ZIP file not found at: $zipPath"
              Write-Host "Current directory files:"
              Get-ChildItem -Name
              exit 1
          }

      # 7. Extract release notes from CHANGELOG.md
      - name: Extract release notes from CHANGELOG
        id: changelog
        run: |
          if (-not (Test-Path CHANGELOG.md)) { Write-Error "CHANGELOG.md not found!"; exit 1 }
          $version = "${{ github.ref_name }}"
          $lines = Get-Content CHANGELOG.md
          $inSection = $false
          $notes = @()
          
          foreach ($line in $lines) {
              if ($line -match "## \[$version\]") { 
                  $inSection = $true
                  continue 
              }
              if ($inSection -and $line -match "^## \[") { 
                  break
              }
              if ($inSection -and $line.Trim() -ne "" -and $line -notmatch "^#") { 
                  $notes += $line.Trim() 
              }
          }
          
          if ($notes.Count -eq 0) { 
              Write-Warning "No changelog section found for $version"
              $releaseNotes = "No release notes available for this version. Please check the CHANGELOG.md for details."
          } else {
              $releaseNotes = $notes -join "`n"
          }
          
          $delimiter = "EOF_$(Get-Random)"
          echo "body<<$delimiter" >> $env:GITHUB_OUTPUT
          echo "$releaseNotes" >> $env:GITHUB_OUTPUT
          echo "$delimiter" >> $env:GITHUB_OUTPUT

      # 8. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.body }}
          files: ${{ steps.find-project.outputs.project_name }}-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}